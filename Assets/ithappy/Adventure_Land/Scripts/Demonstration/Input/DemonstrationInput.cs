//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/ithappy/Adventure_Land/Scripts/Demonstration/Input/DemonstrationInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace ithappy.Adventure_Land
{
    public partial class @DemonstrationInput: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @DemonstrationInput()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""DemonstrationInput"",
    ""maps"": [
        {
            ""name"": ""Character"",
            ""id"": ""af8f8237-ed10-48ca-9d65-99a1ce9454d1"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""bc145181-94ef-4869-97eb-aca399df2a53"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""87eeaf36-ce69-48a2-8ce0-9f1b8f12c35c"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Emotions"",
                    ""type"": ""Button"",
                    ""id"": ""f863fa09-66f9-481a-bf1c-48575c1d083e"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Rotations"",
                    ""type"": ""Value"",
                    ""id"": ""7291b471-f5e1-41f1-9ea0-fb0d636ac7bc"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""BackFromCharacter"",
                    ""type"": ""Button"",
                    ""id"": ""f9c66477-cc70-4871-9546-26d98fea3d20"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""456a5e16-2f9e-4fd1-956e-9e14b5308e3e"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""c608e398-2239-4384-8ebc-b9c0aee439a1"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""af2c5310-d189-4172-bf3a-12f2b1d2fcda"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""f66ca4db-6b9e-4562-92df-916b1bc9b743"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""ab9b5237-0ff0-4329-8f41-fc641fd5f1f3"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""f03d3569-90f8-465f-9162-ee2889c80524"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2de478cd-4299-43d1-830e-4d1d3346a87c"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Emotions"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""60482e95-93d3-47a2-a701-cc7fa7b4c152"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotations"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c815f5d3-e6ce-467e-a25a-2afd401db381"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BackFromCharacter"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Camera"",
            ""id"": ""9db8ad29-70ce-4cc6-82b2-5dc5bf8e61a3"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""50487464-9a8d-4862-9bc0-df6a0f44717e"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Scroll"",
                    ""type"": ""Value"",
                    ""id"": ""6ef49a48-3d68-4f6b-97b1-366ddfc92be5"",
                    ""expectedControlType"": ""Delta"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Mouse"",
                    ""type"": ""Value"",
                    ""id"": ""0ffc4fcc-b357-4967-a654-cd5d61d8ebed"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RightClick"",
                    ""type"": ""Button"",
                    ""id"": ""44047202-6736-4710-a19f-4afca212f1ea"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Shifted"",
                    ""type"": ""Button"",
                    ""id"": ""63ab0712-1b69-41bc-b715-f9ad7ceb877e"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""3D Vector"",
                    ""id"": ""cd54b5eb-4a41-4201-9151-e5b87f2e004d"",
                    ""path"": ""3DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""b9a5cb71-d1bf-4d25-896e-9b665cc158db"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""17ddf209-6fdf-4083-9053-07b5ae53d278"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""8ff20e00-28a1-4574-b4c4-49e12cefbbdc"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""15432d7e-8e10-4de9-b406-cc8cf23573ea"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""forward"",
                    ""id"": ""81883b37-8b29-40b7-82ab-a38ac19be8d0"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""backward"",
                    ""id"": ""3e57efd7-8291-416f-a123-4ecbda221058"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""28453a66-e853-4d06-b332-24ca144f5b04"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Scroll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""232d7ca2-76a8-4621-946f-a2377325ed11"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mouse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""69b5d19f-8fc8-4b72-9098-b5f98488a9f5"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""49d1066c-4b2f-47e5-bafe-80658e6d16f8"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shifted"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Character
            m_Character = asset.FindActionMap("Character", throwIfNotFound: true);
            m_Character_Movement = m_Character.FindAction("Movement", throwIfNotFound: true);
            m_Character_Jump = m_Character.FindAction("Jump", throwIfNotFound: true);
            m_Character_Emotions = m_Character.FindAction("Emotions", throwIfNotFound: true);
            m_Character_Rotations = m_Character.FindAction("Rotations", throwIfNotFound: true);
            m_Character_BackFromCharacter = m_Character.FindAction("BackFromCharacter", throwIfNotFound: true);
            // Camera
            m_Camera = asset.FindActionMap("Camera", throwIfNotFound: true);
            m_Camera_Movement = m_Camera.FindAction("Movement", throwIfNotFound: true);
            m_Camera_Scroll = m_Camera.FindAction("Scroll", throwIfNotFound: true);
            m_Camera_Mouse = m_Camera.FindAction("Mouse", throwIfNotFound: true);
            m_Camera_RightClick = m_Camera.FindAction("RightClick", throwIfNotFound: true);
            m_Camera_Shifted = m_Camera.FindAction("Shifted", throwIfNotFound: true);
        }

        ~@DemonstrationInput()
        {
            UnityEngine.Debug.Assert(!m_Character.enabled, "This will cause a leak and performance issues, DemonstrationInput.Character.Disable() has not been called.");
            UnityEngine.Debug.Assert(!m_Camera.enabled, "This will cause a leak and performance issues, DemonstrationInput.Camera.Disable() has not been called.");
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Character
        private readonly InputActionMap m_Character;
        private List<ICharacterActions> m_CharacterActionsCallbackInterfaces = new List<ICharacterActions>();
        private readonly InputAction m_Character_Movement;
        private readonly InputAction m_Character_Jump;
        private readonly InputAction m_Character_Emotions;
        private readonly InputAction m_Character_Rotations;
        private readonly InputAction m_Character_BackFromCharacter;
        public struct CharacterActions
        {
            private @DemonstrationInput m_Wrapper;
            public CharacterActions(@DemonstrationInput wrapper) { m_Wrapper = wrapper; }
            public InputAction @Movement => m_Wrapper.m_Character_Movement;
            public InputAction @Jump => m_Wrapper.m_Character_Jump;
            public InputAction @Emotions => m_Wrapper.m_Character_Emotions;
            public InputAction @Rotations => m_Wrapper.m_Character_Rotations;
            public InputAction @BackFromCharacter => m_Wrapper.m_Character_BackFromCharacter;
            public InputActionMap Get() { return m_Wrapper.m_Character; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(CharacterActions set) { return set.Get(); }
            public void AddCallbacks(ICharacterActions instance)
            {
                if (instance == null || m_Wrapper.m_CharacterActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_CharacterActionsCallbackInterfaces.Add(instance);
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Emotions.started += instance.OnEmotions;
                @Emotions.performed += instance.OnEmotions;
                @Emotions.canceled += instance.OnEmotions;
                @Rotations.started += instance.OnRotations;
                @Rotations.performed += instance.OnRotations;
                @Rotations.canceled += instance.OnRotations;
                @BackFromCharacter.started += instance.OnBackFromCharacter;
                @BackFromCharacter.performed += instance.OnBackFromCharacter;
                @BackFromCharacter.canceled += instance.OnBackFromCharacter;
            }

            private void UnregisterCallbacks(ICharacterActions instance)
            {
                @Movement.started -= instance.OnMovement;
                @Movement.performed -= instance.OnMovement;
                @Movement.canceled -= instance.OnMovement;
                @Jump.started -= instance.OnJump;
                @Jump.performed -= instance.OnJump;
                @Jump.canceled -= instance.OnJump;
                @Emotions.started -= instance.OnEmotions;
                @Emotions.performed -= instance.OnEmotions;
                @Emotions.canceled -= instance.OnEmotions;
                @Rotations.started -= instance.OnRotations;
                @Rotations.performed -= instance.OnRotations;
                @Rotations.canceled -= instance.OnRotations;
                @BackFromCharacter.started -= instance.OnBackFromCharacter;
                @BackFromCharacter.performed -= instance.OnBackFromCharacter;
                @BackFromCharacter.canceled -= instance.OnBackFromCharacter;
            }

            public void RemoveCallbacks(ICharacterActions instance)
            {
                if (m_Wrapper.m_CharacterActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(ICharacterActions instance)
            {
                foreach (var item in m_Wrapper.m_CharacterActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_CharacterActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public CharacterActions @Character => new CharacterActions(this);

        // Camera
        private readonly InputActionMap m_Camera;
        private List<ICameraActions> m_CameraActionsCallbackInterfaces = new List<ICameraActions>();
        private readonly InputAction m_Camera_Movement;
        private readonly InputAction m_Camera_Scroll;
        private readonly InputAction m_Camera_Mouse;
        private readonly InputAction m_Camera_RightClick;
        private readonly InputAction m_Camera_Shifted;
        public struct CameraActions
        {
            private @DemonstrationInput m_Wrapper;
            public CameraActions(@DemonstrationInput wrapper) { m_Wrapper = wrapper; }
            public InputAction @Movement => m_Wrapper.m_Camera_Movement;
            public InputAction @Scroll => m_Wrapper.m_Camera_Scroll;
            public InputAction @Mouse => m_Wrapper.m_Camera_Mouse;
            public InputAction @RightClick => m_Wrapper.m_Camera_RightClick;
            public InputAction @Shifted => m_Wrapper.m_Camera_Shifted;
            public InputActionMap Get() { return m_Wrapper.m_Camera; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(CameraActions set) { return set.Get(); }
            public void AddCallbacks(ICameraActions instance)
            {
                if (instance == null || m_Wrapper.m_CameraActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_CameraActionsCallbackInterfaces.Add(instance);
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Scroll.started += instance.OnScroll;
                @Scroll.performed += instance.OnScroll;
                @Scroll.canceled += instance.OnScroll;
                @Mouse.started += instance.OnMouse;
                @Mouse.performed += instance.OnMouse;
                @Mouse.canceled += instance.OnMouse;
                @RightClick.started += instance.OnRightClick;
                @RightClick.performed += instance.OnRightClick;
                @RightClick.canceled += instance.OnRightClick;
                @Shifted.started += instance.OnShifted;
                @Shifted.performed += instance.OnShifted;
                @Shifted.canceled += instance.OnShifted;
            }

            private void UnregisterCallbacks(ICameraActions instance)
            {
                @Movement.started -= instance.OnMovement;
                @Movement.performed -= instance.OnMovement;
                @Movement.canceled -= instance.OnMovement;
                @Scroll.started -= instance.OnScroll;
                @Scroll.performed -= instance.OnScroll;
                @Scroll.canceled -= instance.OnScroll;
                @Mouse.started -= instance.OnMouse;
                @Mouse.performed -= instance.OnMouse;
                @Mouse.canceled -= instance.OnMouse;
                @RightClick.started -= instance.OnRightClick;
                @RightClick.performed -= instance.OnRightClick;
                @RightClick.canceled -= instance.OnRightClick;
                @Shifted.started -= instance.OnShifted;
                @Shifted.performed -= instance.OnShifted;
                @Shifted.canceled -= instance.OnShifted;
            }

            public void RemoveCallbacks(ICameraActions instance)
            {
                if (m_Wrapper.m_CameraActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(ICameraActions instance)
            {
                foreach (var item in m_Wrapper.m_CameraActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_CameraActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public CameraActions @Camera => new CameraActions(this);
        public interface ICharacterActions
        {
            void OnMovement(InputAction.CallbackContext context);
            void OnJump(InputAction.CallbackContext context);
            void OnEmotions(InputAction.CallbackContext context);
            void OnRotations(InputAction.CallbackContext context);
            void OnBackFromCharacter(InputAction.CallbackContext context);
        }
        public interface ICameraActions
        {
            void OnMovement(InputAction.CallbackContext context);
            void OnScroll(InputAction.CallbackContext context);
            void OnMouse(InputAction.CallbackContext context);
            void OnRightClick(InputAction.CallbackContext context);
            void OnShifted(InputAction.CallbackContext context);
        }
    }
}
